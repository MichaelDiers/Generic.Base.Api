name: NuGet update for Generic.Base.Api.MongoDb
on: 
  registry_package:
    action:
      - updated
    package_name: 
      - 'Generic.Base.Api'
permissions:
  contents: write
  packages: write
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NUGET_GITHUB_TOKEN: ${{ secrets.NUGET_GITHUB_TOKEN }}
      nupkg: Generic.Base.Api.MongoDb
      push-source: https://nuget.pkg.github.com/MichaelDiers/index.json
      working-directory: Generic.Base.Api.MongoDb
      CSPROJ: Generic.Base.Api.MongoDb/Generic.Base.Api.MongoDb/Generic.Base.Api.MongoDb.csproj
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: add package source
      run: |
        dotnet new nugetconfig
        dotnet nuget add source https://nuget.pkg.github.com/MichaelDiers/index.json --name github --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text 
      working-directory: ${{env.working-directory}}
    - name: nuget update
      run: dotnet add package Generic.Base.Api
      working-directory: ${{env.working-directory}}
    - name: extract old version
      run: echo "OLD_VERSION=$(cat ${{env.CSPROJ}} | grep -Po '<Version>.+?</Version>')" >> $GITHUB_ENV
    - name: extract major, minor, patch
      run: |
        echo "PATCH_VERSION=$(echo ${OLD_VERSION} | grep -Po '<Version>[0-9]+\.[0-9]+\.\K.*?(?=</Version>)' | awk '{print $0+1}')" >> $GITHUB_ENV
        echo "MAJOR_MINOR_VERSION=$(echo ${OLD_VERSION} | grep -Po '<Version>\K.*?(?=[0-9]+</Version>)')" >> $GITHUB_ENV
    - name: new version
      run: |
        echo "NEW_VERSION=<Version>${MAJOR_MINOR_VERSION}${PATCH_VERSION}</Version>" >> $GITHUB_ENV
        echo "VERSION=${MAJOR_MINOR_VERSION}${PATCH_VERSION}" >> $GITHUB_ENV
    - name: patch
      run: sed -i "s|${OLD_VERSION}|${NEW_VERSION}|g" ${{env.CSPROJ}}
    - name: build
      run: dotnet build --configuration Release 
      working-directory: ${{env.working-directory}}
    - name: Test
      run: dotnet test --configuration Release --no-build --filter "TestType=UnitTest"
      working-directory: ${{env.working-directory}}
    - name: Pack
      run: dotnet pack --configuration Release --no-build --output .
      working-directory: ${{env.working-directory}}
    - name: Push
      run: dotnet nuget push ${{env.nupkg}}.${VERSION}.nupkg --source ${{env.push-source}} --api-key ${{ secrets.GITHUB_TOKEN }}
      working-directory: ${{env.working-directory}}
    - name: Commit version patch
      run: |
        git config --global user.name '${{ github.actor }}'
        git config --global user.email '${{ github.actor }}@users.noreply.github.com'
        git add ${{env.CSPROJ}}
        git commit -m "version update to ${VERSION}"
        git push
